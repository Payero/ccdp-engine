#################################################################
##
##  Stores the log4j file to use to control the verbosity
##
log4j.config.file=${CCDP_HOME}/config/log4j.properties

#################################################################
##
##  The executor needs a self contain jar file.  This property is used to 
##  determine the location of such jar
##
executor.src.jar.file=${CCDP_HOME}/dist/CCDP/mesos-ccdp-exec.jar


#################################################################
##
##  The URL used by the Mesos Master to receive incoming Mesos Agents 
##  registrations
##
#mesos.master.uri=10.215.35.247:5050  
mesos.master.uri=172.31.20.84:5050   

#################################################################
##
## Tells the framework how many free agents need to be running at any given 
## time.  The framework will start resources until it meets this requirements 
## and will continuing launching resources during operations as they are being
## used.
##
min.number.free.agents=0

#################################################################
##
##  All the objects used by the system are generated using a factory.  This
##  property contains the fully qualified dot notation name of an actual 
##  implementation of the CcdpObjectFactoryIntf.
##
##  IMPORTANT:  Do not place quotes around the name as it will fail
##
factory.interface.impl=com.axios.ccdp.factory.AWSCcdpFactoryImpl


#################################################################
##
##  Default destination to send tasking responses if not set in the task 
##  itself.  If this is not set, then no data is sent
##
from.scheduler.channel=CcdpTaskingActivity


########################################################################
##                                                                    ##
##  The following set of properties use the start of the name to      ##
##  set the parameters of each type of object and cannot be           ##
##  changed                                                           ##
##                                                                    ##
##    taskingIntf:    Receives tasks from external sources            ##
##    taskContrIntf:  Determines the task allocation logic            ##
##    resourceIntf:   Starts/stops all the resources                  ##
##    storageIntf:    Stores and deletes data from storage solutions  ##
##                                                                    ##
##                                                                    ##
########################################################################

#-------------------------------------------------------------------------#
#--------------- Tasking Messaging Interface Configuration  --------------
#-------------------------------------------------------------------------#

#################################################################
##
##  Stores any string used by the tasking interface to connect to a broker
##  if required.
##
taskingIntf.broker.connection=failover://tcp://localhost:61616

#################################################################
##
##  Stores the name of the channel used to send tasks to the Scheduler.  This
##  could be the name of a queue, a directory, etc.
##
taskingIntf.to.scheduler.channel=TaskingQueue

#################################################################
##
## Sets a unique identifier for the framework.  It uses the assigned one
## from Mesos if not defined.
##
#taskingIntf.tasking.uuid=

#################################################################
##
## This channel is used to send a message from the Scheduler to any entity 
## listening.  If this is not defined then a sender is not used
##
#taskingIntf.from.scheduler.channel=CcdpTaskingActivity



#-------------------------------------------------------------------------#
#-------------- Tasking Controller Interface Configuration  --------------
#-------------------------------------------------------------------------#

#################################################################
##
#taskContrIntf.user.data=
#################################################################
##
## The average load for all the VMs in the same session.  Once this average 
## is reached for more than the average load time (in minutes) then it will
## start a new VM
## 
taskContrIntf.allocate.avg.load.cpu=70
taskContrIntf.allocate.avg.load.mem=70
taskContrIntf.allocate.avg.load.time=2

## Deallocation parameters, once is low it will stop tasking it and when it
## reaches 0 it stops it
taskContrIntf.deallocate.avg.load.cpu=20
taskContrIntf.deallocate.avg.load.mem=20
taskContrIntf.deallocate.avg.load.time=5



#-------------------------------------------------------------------------#
#-------------- Resource Controller Interface Configuration  -------------
#-------------------------------------------------------------------------#

#################################################################
##
#resourceIntf
##  -----  The Configuration below is for the Master Image  --- ##
#resourceIntf.image.id=ami-417e6156
#resourceIntf.security.group=sg-b28aafcf
#resourceIntf.subnet.id=subnet-7c6dfc51
#resourceIntf.key.file.name=aws_serv_server_key
#resourceIntf.tags={"session-id": "Service-Node", "Name": "Serv-1"}

resourceIntf.image.id=ami-e8f96dfe
resourceIntf.security.group=sg-54410d2f
resourceIntf.subnet.id=subnet-d7008b8f
resourceIntf.key.file.name=aws_serv_server_key
resourceIntf.tags={"session-id": "Service-Node", "Name": "Serv-1"}
#resourceIntf.user.data=/bin/sh /data/ccdp_env.py -a download -i
#resourceIntf.arguments=-s test-id

#-------------------------------------------------------------------------#
#-------------- Storage Controller Interface Configuration  --------------
#-------------------------------------------------------------------------#

#################################################################
##
#storageIntf








